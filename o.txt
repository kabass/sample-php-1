<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.5.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>git@github.com:kabass/sample-php-1.git</url>
        <credentialsId>e829ff57-3c43-442b-b783-fba3406bee2d</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash 

GIT_REPOSITORY_PATH=$(basename -s .git `git config --get remote.origin.url`) # Get the repository path
echo $GIT_REPOSITORY_PATH
GIT_REPOSITORY_NAME=$(basename $GIT_REPOSITORY_PATH) # Extract the repository name

# Get all branches from current repository
git branch -r | # List all branches
 grep -v &quot;origin/HEAD&quot; | # Remove HEAD (which *should* point at master)
 sed &quot;s/^[ \t]*//;s/[ \t]*$//&quot; | # Remove white space
 sed &quot;s/^origin\///&quot; | # Remove origin prefix
 grep -v &quot;^$&quot; &gt; branches # Remove empty lines and create a temporary file. Each line represents a branch

# For each branch
while read -r line # Loop through all the lines in the branches file
do
BRANCH=$line
JOB_NAME=${GIT_REPOSITORY_NAME}-$BRANCH # Create a job name for this branch

# Curl the Job URL to see if it exists
# &quot;
SHOULD_BE_404_IF_NEW_JOB=$(java -jar ~/logiciel/jenkins/jenkins-cli.jar -s http://localhost:8080 -auth admin:admin  get-job $JOB_NAME)
echo $SHOULD_BE_404_IF_NEW_JOB
echo $SHOULD_BE_404_IF_NEW_JOB
echo $SHOULD_BE_404_IF_NEW_JOB
echo &quot;kjkjjk&quot;
# Only create a job if it doesn’t already exist. No point doing it twice
if [[ $SHOULD_BE_404_IF_NEW_JOB = ERROR* ]]; then

echo $SHOULD_BE_404_IF_NEW_JOB
# Create a paramter for this branch to be used by the job generator
JOB_BRANCH_PARAMETERS=&quot;{\&quot;parameter\&quot;: [{\&quot;name\&quot;:\&quot;branch\&quot;, \&quot;value\&quot;:\&quot;$BRANCH\&quot;}]}&quot;

# Use JQ (apt-get install jq if you don’t have it) to merge the user supplied parameters (from git) with the branch name needed by the generator job
JOB_MERGED_PARAMETERS=&apos;jq -s ‘.[0].parameter + .[1].parameter | {parameter: .}’ left.json right.json&apos;

# Post to jenkins to trigger the generation job
curl -X POST ${JENKINS_URL}job/$JOB_GENERATOR_NAME/build \
-u $USER:$TOKEN \
–data-urlencode json=&quot;$JOB_BRANCH_PARAMETERS&quot;

fi

done &lt; branches
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>